!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BATCH_SIZE	global_vars.py	/^BATCH_SIZE = 16 # 64$/;"	v
FILE_REGEX	global_vars.py	/^FILE_REGEX = "satImage_%.3d"$/;"	v
FLAGS	tf_aerial_images.py	/^FLAGS = tf.app.flags.FLAGS$/;"	v
IMG_PATCH_SIZE	global_vars.py	/^IMG_PATCH_SIZE = 16$/;"	v
Image	image_helpers.py	/^from PIL import Image$/;"	i
Image	submission_to_mask.py	/^import Image$/;"	i
NUM_CHANNELS	global_vars.py	/^NUM_CHANNELS = 3 # RGB images$/;"	v
NUM_EPOCHS	global_vars.py	/^NUM_EPOCHS = 2$/;"	v
NUM_LABELS	global_vars.py	/^NUM_LABELS = 2$/;"	v
PIXEL_DEPTH	global_vars.py	/^PIXEL_DEPTH = 255$/;"	v
RECORDING_STEP	global_vars.py	/^RECORDING_STEP = 1000$/;"	v
RESTORE_MODEL	global_vars.py	/^RESTORE_MODEL = False # If True, restore existing model instead of training a new one$/;"	v
SEED	global_vars.py	/^SEED = 66478  # Set to None for random seed.$/;"	v
TRAINING_SIZE	global_vars.py	/^TRAINING_SIZE = 20$/;"	v
TRAIN_PREDICTIONS	global_vars.py	/^TRAIN_PREDICTIONS = False # If True, restore existing model instead of training a new one$/;"	v
VALIDATION_SIZE	global_vars.py	/^VALIDATION_SIZE = 5  # Size of the validation set$/;"	v
binary_to_uint8	submission_to_mask.py	/^def binary_to_uint8(img):$/;"	f
concatenate_images	image_helpers.py	/^def concatenate_images(img, gt_img):$/;"	f
error_rate	image_helpers.py	/^def error_rate(predictions, labels):$/;"	f
extract_data	image_helpers.py	/^def extract_data(filename, num_images):$/;"	f
extract_labels	image_helpers.py	/^def extract_labels(filename, num_images):$/;"	f
fetchTiles	TileDownloader/tile-fetcher.js	/^function fetchTiles(page, folder) {$/;"	f
foreground_threshold	mask_to_submission.py	/^foreground_threshold = 0.25 # percentage of pixels > 1 required to assign a foreground label to a patch$/;"	v
get_image_summary	tf_aerial_images.py	/^    def get_image_summary(img, idx=0):$/;"	f	function:main
get_image_summary_3d	tf_aerial_images.py	/^    def get_image_summary_3d(img):$/;"	f	function:main
get_prediction	tf_aerial_images.py	/^    def get_prediction(img):$/;"	f	function:main
get_prediction_for_patches	tf_aerial_images.py	/^    def get_prediction_for_patches(patches):$/;"	f	function:main
get_prediction_with_groundtruth	tf_aerial_images.py	/^    def get_prediction_with_groundtruth(filename, image_idx):$/;"	f	function:main
get_prediction_with_overlay	tf_aerial_images.py	/^    def get_prediction_with_overlay(filename, image_idx):$/;"	f	function:main
h	submission_to_mask.py	/^h = 16$/;"	v
height	TileDownloader/tile-fetcher.js	/^var height = 4000;$/;"	v
img_crop	image_helpers.py	/^def img_crop(im, w, h):$/;"	f
img_float_to_uint8	image_helpers.py	/^def img_float_to_uint8(img):$/;"	f
imgheight	submission_to_mask.py	/^imgheight = int(math.ceil((600.0\/h))*h)$/;"	v
imgwidth	submission_to_mask.py	/^imgwidth = int(math.ceil((600.0\/w))*w)$/;"	v
initMap	TileDownloader/road.html	/^  function initMap() {$/;"	f
initMap	TileDownloader/satellite.html	/^  function initMap() {$/;"	f
label_file	submission_to_mask.py	/^label_file = 'dummy_submission.csv'$/;"	v
label_to_img	image_helpers.py	/^def label_to_img(imgwidth, imgheight, w, h, labels):$/;"	f
main	tf_aerial_images.py	/^def main(argv=None):  # pylint: disable=unused-argument$/;"	f
make_img_overlay	image_helpers.py	/^def make_img_overlay(img, predicted_img):$/;"	f
mask_to_submission_strings	mask_to_submission.py	/^def mask_to_submission_strings(image_filename):$/;"	f
masks_to_submission	mask_to_submission.py	/^def masks_to_submission(submission_filename, *image_filenames):$/;"	f
math	submission_to_mask.py	/^import math$/;"	i
matplotlib	image_helpers.py	/^import matplotlib.image as mpimg$/;"	i
matplotlib	mask_to_submission.py	/^import matplotlib.image as mpimg$/;"	i
matplotlib	submission_to_mask.py	/^import matplotlib.image as mpimg$/;"	i
model	tf_aerial_images.py	/^    def model(data, train=False):$/;"	f	function:main
mpimg	image_helpers.py	/^import matplotlib.image as mpimg$/;"	i
mpimg	mask_to_submission.py	/^import matplotlib.image as mpimg$/;"	i
mpimg	submission_to_mask.py	/^import matplotlib.image as mpimg$/;"	i
nc	submission_to_mask.py	/^nc = 3$/;"	v
np	mask_to_submission.py	/^import numpy as np$/;"	i
np	submission_to_mask.py	/^import numpy as np$/;"	i
numpy	image_helpers.py	/^import numpy$/;"	i
openPageAndFetchTiles	TileDownloader/tile-fetcher.js	/^function openPageAndFetchTiles(page, url, folder) {$/;"	f
os	image_helpers.py	/^import os$/;"	i
os	mask_to_submission.py	/^import os$/;"	i
os	submission_to_mask.py	/^import os$/;"	i
page	TileDownloader/tile-fetcher.js	/^var page = webPage.create();$/;"	v
patch_to_label	mask_to_submission.py	/^def patch_to_label(patch):$/;"	f
print_predictions	image_helpers.py	/^def print_predictions(predictions, labels):$/;"	f
re	mask_to_submission.py	/^import re$/;"	i
reconstruct_from_labels	submission_to_mask.py	/^def reconstruct_from_labels(image_id):$/;"	f
sys	submission_to_mask.py	/^import sys$/;"	i
sys	tf_aerial_images.py	/^import sys$/;"	i
system	TileDownloader/tile-fetcher.js	/^var system = require("system");$/;"	v
tf	tf_aerial_images.py	/^import tensorflow as tf$/;"	i
top	TileDownloader/tile-fetcher.js	/^        top: height - (i * TILE_SIZE),$/;"	p	class:page.clipRect
value_to_class	image_helpers.py	/^def value_to_class(v):$/;"	f
w	submission_to_mask.py	/^w = h$/;"	v
webPage	TileDownloader/tile-fetcher.js	/^var webPage = require("webpage");$/;"	v
width	TileDownloader/tile-fetcher.js	/^  width: width + TILE_SIZE,$/;"	p	class:page.viewportSize
width	TileDownloader/tile-fetcher.js	/^var width = 4000;$/;"	v
write_predictions_to_file	image_helpers.py	/^def write_predictions_to_file(predictions, labels, filename):$/;"	f
